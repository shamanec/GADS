// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/configuration/upload-wda": {
            "post": {
                "description": "Uploads the provided *.ipa into the ./apps folder with the expected \"WebDriverAgent.ipa\" name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Upload WDA",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.JsonResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    }
                }
            }
        },
        "/devices/available-devices": {
            "post": {
                "description": "Provides info of the currently available devices",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "Get available devices info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.AvailableDevicesInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    }
                }
            }
        },
        "/devices/control/{device_host}/{device_udid}": {
            "post": {
                "description": "Loads the page for a selected device from the device selection page",
                "produces": [
                    "text/html"
                ],
                "summary": "Load the page for a selected device",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/project-logs": {
            "get": {
                "description": "Provides project logs as plain text response",
                "tags": [
                    "project-logs"
                ],
                "summary": "Get project logs",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "main.AvailableDevicesInfo": {
            "type": "object",
            "properties": {
                "devices-info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.ContainerDeviceConfig"
                    }
                }
            }
        },
        "main.ContainerDeviceConfig": {
            "type": "object",
            "properties": {
                "appium_port": {
                    "type": "string"
                },
                "container_server_port": {
                    "type": "string"
                },
                "device_host": {
                    "type": "string"
                },
                "device_image": {
                    "type": "string"
                },
                "device_model": {
                    "type": "string"
                },
                "device_os": {
                    "type": "string"
                },
                "device_os_version": {
                    "type": "string"
                },
                "device_udid": {
                    "type": "string"
                },
                "screen_size": {
                    "type": "string"
                },
                "stream_port": {
                    "type": "string"
                },
                "wda_port": {
                    "type": "string"
                }
            }
        },
        "main.JsonErrorResponse": {
            "type": "object",
            "properties": {
                "error_message": {
                    "type": "string"
                },
                "event": {
                    "type": "string"
                }
            }
        },
        "main.JsonResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
